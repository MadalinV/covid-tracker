{"version":3,"sources":["util.js","Map.js","Table.js","InfoBox.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["casesTypeColors","cases","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","pathOptions","color","fillColor","radius","Math","sqrt","Popup","className","style","backgroundImage","flag","numeral","format","prettyPrintStat","stat","ChangeMapView","coords","useMap","setView","lng","getZoom","Map","countries","zoom","key","TileLayer","url","attribution","Table","InfoBox","title","total","isRed","active","onClick","Card","CardContent","Typography","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","perse","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","id","_id","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.19d2c132.chunk.js","sourcesContent":["import { Circle, Popup } from \"react-leaflet\";\r\nimport React from \"react\";\r\nimport numeral from \"numeral\";\r\n\r\nconst casesTypeColors = {\r\n\tcases: {\r\n\t\thex: \"#CC1034\",\r\n\r\n\t\tmultiplier: 400,\r\n\t},\r\n\trecovered: {\r\n\t\thex: \"#7dd71d\",\r\n\t\tmultiplier: 400,\r\n\t},\r\n\tdeaths: {\r\n\t\thex: \"#fb4443\",\r\n\t\tmultiplier: 2000,\r\n\t},\r\n};\r\nexport const sortData = data => {\r\n\tconst sortedData = [...data];\r\n\tsortedData.sort((a, b) => {\r\n\t\tif (a.cases > b.cases) {\r\n\t\t\treturn -1;\r\n\t\t} else {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t});\r\n\treturn sortedData;\r\n};\r\nexport const showDataOnMap = (data, casesType = \"recovered\") =>\r\n\tdata.map(country => (\r\n\t\t<Circle\r\n\t\t\tcenter={[country.countryInfo.lat, country.countryInfo.long]}\r\n\t\t\tfillOpacity={0.4}\r\n\t\t\tpathOptions={{\r\n\t\t\t\tcolor: casesTypeColors[casesType].hex,\r\n\t\t\t\tfillColor: casesTypeColors[casesType].hex,\r\n\t\t\t}}\r\n\t\t\tradius={\r\n\t\t\t\tMath.sqrt(country[casesType]) *\r\n\t\t\t\tcasesTypeColors[casesType].multiplier\r\n\t\t\t}\r\n\t\t\tkey={country.country}\r\n\t\t>\r\n\t\t\t<Popup>\r\n\t\t\t\t<div className=\"info-container\">\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tclassName=\"info-flag\"\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\tbackgroundImage: `url(${country.countryInfo.flag})`,\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t<div className=\"info-name\">{country.country}</div>\r\n\t\t\t\t\t<div className=\"info-confirm\">\r\n\t\t\t\t\t\tCases:{numeral(country.cases).format(\"0,0\")}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"info-recovered\">\r\n\t\t\t\t\t\tRecovered:{numeral(country.recovered).format(\"0,0\")}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"info-deaths\">\r\n\t\t\t\t\t\tDeaths:{numeral(country.deaths).format(\"0,0\")}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</Popup>\r\n\t\t</Circle>\r\n\t));\r\nexport const prettyPrintStat = stat =>\r\n\tstat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n\r\n","import React from \"react\";\r\nimport \"./map.css\";\r\nimport { MapContainer as LeafletMap, TileLayer, useMap } from \"react-leaflet\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nconst ChangeMapView = ({ coords }) => {\r\n\tconst map = useMap();\r\n\tmap.setView([coords.lat, coords.lng], map.getZoom());\r\n\r\n\treturn null;\r\n};\r\n\r\nfunction Map({ countries, casesType, center, zoom , key}) {\r\n\treturn (\r\n\t\t<div className=\"map\" >\r\n\t\t\t<LeafletMap center={center} zoom={zoom}>\r\n\t\t\t\t<TileLayer\r\n\t\t\t\t\turl=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n\t\t\t\t\tattribution='$copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n\t\t\t\t\t\r\n\t\t\t\t/>\r\n\t\t\t\t{showDataOnMap(countries, casesType)}\r\n\t\t\t\t<ChangeMapView coords={center} />\r\n\t\t\t</LeafletMap>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries }) {\r\n\treturn (\r\n\t\t<div  className=\"table\">\r\n\t\t\t<table >\r\n\t\t\t\t<tbody>\r\n\t\t\t\t\t{countries.map(({ country, cases }) => (\r\n\t\t\t\t\t\t<tr key={country}>\r\n\t\t\t\t\t\t\t<td>{country}</td>\r\n\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t<strong>{numeral(cases).format()}</strong>\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\nimport \"./InfoBox.css\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nfunction InfoBox({ title, cases, total, isRed, active, onClick }) {\r\n\treturn (\r\n\t\t<Card\r\n\t\t\tonClick={onClick}\r\n\t\t\tclassName={`infoBox ${active && \"infoBox--selected\"} ${\r\n\t\t\t\tisRed && \"infoBox--red\"\r\n\t\t\t}`}\r\n\t\t>\r\n\t\t\t<CardContent>\r\n\t\t\t\t<Typography className=\"infoBox_title\" color=\"textSecondary\">\r\n\t\t\t\t\t{title}\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<h2\r\n\t\t\t\t\tclassName={`infoBox_cases ${\r\n\t\t\t\t\t\t!isRed && \"infoBox__cases--green\"\r\n\t\t\t\t\t}`}\r\n\t\t\t\t>\r\n\t\t\t\t\t{cases}\r\n\t\t\t\t</h2>\r\n\t\t\t\t<Typography color=\"textSecondary\">{total}Total</Typography>\r\n\t\t\t</CardContent>\r\n\t\t</Card>\r\n\t);\r\n}\r\n\r\nexport default InfoBox;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n\tlegend: {\r\n\t\tdisplay: false,\r\n\t},\r\n\telements: {\r\n\t\tpoint: {\r\n\t\t\tradius: 0,\r\n\t\t},\r\n\t},\r\n\tmaintainAspectRatio: false,\r\n\ttooltips: {\r\n\t\tmode: \"index\",\r\n\t\tintersect: false,\r\n\t\tcallbacks: {\r\n\t\t\tlabel: function (tooltipItem, data) {\r\n\t\t\t\treturn numeral(tooltipItem.value).format(\"+0,0\");\r\n\t\t\t},\r\n\t\t},\r\n\t},\r\n\tscales: {\r\n\t\txAxes: [\r\n\t\t\t{\r\n\t\t\t\ttype: \"time\",\r\n\t\t\t\ttime: {\r\n\t\t\t\t\tperse: \"MM/DD/YY\",\r\n\t\t\t\t\ttooltipFormat: \"ll\",\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t],\r\n\t\tyAxes: [\r\n\t\t\t{\r\n\t\t\t\tgridLines: {\r\n\t\t\t\t\tdisplay: false,\r\n\t\t\t\t},\r\n\t\t\t\tticks: {\r\n\t\t\t\t\t// Include a dollar sign in the ticks\r\n\t\t\t\t\tcallback: function (value, index, values) {\r\n\t\t\t\t\t\treturn numeral(value).format(\"0a\");\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t],\r\n\t},\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n\tlet chartData = [];\r\n\tlet lastDataPoint;\r\n\tfor (let date in data.cases) {\r\n\t\tif (lastDataPoint) {\r\n\t\t\tlet newDataPoint = {\r\n\t\t\t\tx: date,\r\n\t\t\t\ty: data[casesType][date] - lastDataPoint,\r\n\t\t\t};\r\n\t\t\tchartData.push(newDataPoint);\r\n\t\t}\r\n\t\tlastDataPoint = data[casesType][date];\r\n\t}\r\n\treturn chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType }) {\r\n\tconst [data, setData] = useState({});\r\n\r\n\tuseEffect(() => {\r\n\t\tconst fetchData = async () => {\r\n\t\t\tawait fetch(\r\n\t\t\t\t\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\"\r\n\t\t\t)\r\n\t\t\t\t.then(response => {\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t})\r\n\t\t\t\t.then(data => {\r\n\t\t\t\t\tlet chartData = buildChartData(data, casesType);\r\n\t\t\t\t\tsetData(chartData);\r\n\t\t\t\t\t\r\n\t\t\t\t\t//buildChart(chartData);\r\n\t\t\t\t});\r\n\t\t};\r\n\r\n\t\tfetchData();\r\n\t}, [casesType]);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{data?.length > 0 && (\r\n\t\t\t\t<Line\r\n\t\t\t\t\tdata={{\r\n\t\t\t\t\t\tdatasets: [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tbackgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n\t\t\t\t\t\t\t\tborderColor: \"#CC1034\",\r\n\t\t\t\t\t\t\t\tdata: data,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t}}\r\n\t\t\t\t\toptions={options}\r\n\t\t\t\t/>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from \"react\";\nimport {\n\tMenuItem,\n\tFormControl,\n\tSelect,\n\tCard,\n\tCardContent,\n} from \"@material-ui/core\";\nimport \"./App.css\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport InfoBox from \"./InfoBox\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\nfunction App() {\n\tconst [countries, setCountries] = useState([]);\n\tconst [country, setCountry] = useState(\"worldwide\");\n\tconst [countryInfo, setCountryInfo] = useState({});\n\tconst [tableData, setTableData] = useState([]);\n\tconst [mapCenter, setMapCenter] = useState({\n\t\tlat: 34.80746,\n\t\tlng: -40.4796,\n\t});\n\tconst [mapZoom, setMapZoom] = useState(3);\n\tconst [mapCountries, setMapCountries] = useState([]);\n\tconst [casesType, setCasesType] = useState(\"cases\");\n\n\t//https://disease.sh/v3/covid-19/countries\n\tuseEffect(() => {\n\t\tfetch(\"https://disease.sh/v3/covid-19/all\")\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\t\tsetCountryInfo(data);\n\t\t\t});\n\t}, []);\n\tuseEffect(() => {\n\t\tconst getCountriesData = async () => {\n\t\t\tawait fetch(\"https://disease.sh/v3/covid-19/countries\")\n\t\t\t\t.then(response => response.json())\n\t\t\t\t.then(data => {\n\t\t\t\t\tconst countries = data.map(country => ({\n\t\t\t\t\t\tname: country.country,\n\t\t\t\t\t\tvalue: country.countryInfo.iso2,\n\t\t\t\t\t\tid: country.countryInfo._id,\n\t\t\t\t\t}));\n\t\t\t\t\tconst sortedData = sortData(data);\n\t\t\t\t\tsetTableData(sortedData);\n\t\t\t\t\tsetMapCountries(data);\n\t\t\t\t\tsetCountries(countries);\n\t\t\t\t});\n\t\t};\n\n\t\tgetCountriesData();\n\t}, []);\n\tconst onCountryChange = async event => {\n\t\tconst countryCode = event.target.value;\n\t\tsetCountry(countryCode);\n\t\tconst url =\n\t\t\tcountryCode === \"worldwide\"\n\t\t\t\t? \"https://disease.sh/v3/covid-19/all\"\n\t\t\t\t: `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\t\tawait fetch(url)\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\t\tsetCountry(countryCode);\n\t\t\t\tsetCountryInfo(data);\n\t\t\t\tconst {\n\t\t\t\t\tcountryInfo: { lat, long },\n\t\t\t\t} = data;\n\t\t\t\tsetMapCenter({ lat, lng: long });\n\t\t\t\tsetMapZoom(3);\n\t\t\t});\n\t};\n\t\n\t\n\t\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t{/* <h1>Let's build a covid 19 tracker</h1> */}\n\t\t\t<div className=\"app_left\">\n\t\t\t\t<div className=\"app_header\">\n\t\t\t\t\t<h1>COVID-19 TRACKER </h1>\n\t\t\t\t\t<FormControl className=\"app_dropdown\">\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tonChange={onCountryChange}\n\t\t\t\t\t\t\tvalue={country}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<MenuItem value=\"worldwide\">Worldwide</MenuItem>\n\t\t\t\t\t\t\t{countries.map((country, index) => (\n\t\t\t\t\t\t\t\t<MenuItem value={country.value} key={index}>\n\t\t\t\t\t\t\t\t\t{country.name}\n\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"app_stats\">\n\t\t\t\t\t<InfoBox\n\t\t\t\t\t\tisRed={true}\n\t\t\t\t\t\tactive={casesType === \"cases\"}\n\t\t\t\t\t\tonClick={e => setCasesType(\"cases\")}\n\t\t\t\t\t\ttitle=\"Coronavirus cases\"\n\t\t\t\t\t\ttotal={prettyPrintStat(countryInfo.cases)}\n\t\t\t\t\t\tcases={prettyPrintStat(countryInfo.todayCases)}\n\t\t\t\t\t/>\n\t\t\t\t\t<InfoBox\n\t\t\t\t\t\tisRed={false}\n\t\t\t\t\t\tactive={casesType === \"recovered\"}\n\t\t\t\t\t\tonClick={e => setCasesType(\"recovered\")}\n\t\t\t\t\t\ttitle=\"Recovered\"\n\t\t\t\t\t\ttotal={prettyPrintStat(countryInfo.recovered)}\n\t\t\t\t\t\tcases={prettyPrintStat(countryInfo.todayRecovered)}\n\t\t\t\t\t/>\n\t\t\t\t\t<InfoBox\n\t\t\t\t\t\tisRed={true}\n\t\t\t\t\t\tactive={casesType === \"deaths\"}\n\t\t\t\t\t\tonClick={e => setCasesType(\"deaths\")}\n\t\t\t\t\t\ttitle=\"Deaths\"\n\t\t\t\t\t\ttotal={prettyPrintStat(countryInfo.deaths)}\n\t\t\t\t\t\tcases={prettyPrintStat(countryInfo.todayDeaths)}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t{/*Table*/}\n\t\t\t\t{/*Graph*/}\n\t\t\t\t{/* Map*/}\n\t\t\t\t<Map\n\t\t\t\t\tcasesType={casesType}\n\t\t\t\t\tcountries={mapCountries}\n\t\t\t\t\tcenter={mapCenter}\n\t\t\t\t\tzoom={mapZoom}\n\t\t\t\t\tkey={country.id}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<Card className=\"app_right\">\n\t\t\t\t<CardContent>\n\t\t\t\t\t<h3>Live Content by Country</h3>\n\t\t\t\t\t<Table countries={tableData} />\n\t\t\t\t\t<h3 className=\"app_graphTitle\">\n\t\t\t\t\t\tWorldwide new {casesType}\n\t\t\t\t\t</h3>\n\t\t\t\t\t<LineGraph className=\"app_graph\" casesType={casesType} />\n\t\t\t\t</CardContent>\n\t\t\t</Card>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === \"localhost\" ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === \"[::1]\" ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener(\"load\", () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\n\t\t\t\t\t\t\t\"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === \"installed\") {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\"New content is available and will be used when all \" +\n\t\t\t\t\t\t\t\t\t\"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error(\"Error during service worker registration:\", error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { \"Service-Worker\": \"script\" },\n\t})\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get(\"content-type\");\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null &&\n\t\t\t\t\tcontentType.indexOf(\"javascript\") === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t\"No internet connection found. App is running in offline mode.\"\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif (\"serviceWorker\" in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then(registration => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}